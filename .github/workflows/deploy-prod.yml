name: Deploy PWA to S3 + CloudFront

on:
  push:
    branches:
      - [prod, pwa-test-2]  # Deploya cuando se pushea a rama prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VITE_APP_COGNITO_USER_POOL_ID: ${{ secrets.VITE_APP_COGNITO_USER_POOL_ID }}
      VITE_APP_COGNITO_CLIENT_ID: ${{ secrets.VITE_APP_COGNITO_CLIENT_ID }}
      VITE_APP_COGNITO_REGION: ${{ secrets.VITE_APP_COGNITO_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # - name: Run linting
      #   run: pnpm run lint:check

      # - name: Run tests
      #   run: pnpm run test run

      - name: Build PWA project
        run: pnpm run build

      - name: Verify PWA files generated
        run: |
          echo "üîç Verificando archivos PWA generados..."
          ls -la dist/
          if [ -f "dist/manifest.webmanifest" ]; then
            echo "‚úÖ Manifest encontrado"
          else
            echo "‚ùå Manifest no encontrado"
            exit 1
          fi
          if [ -f "dist/sw.js" ]; then
            echo "‚úÖ Service Worker encontrado"
          else
            echo "‚ùå Service Worker no encontrado"
            exit 1
          fi

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete --exclude="*.map"
        env:
          AWS_S3_BUCKET: krixx-app
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1   # cambia seg√∫n tu regi√≥n
          SOURCE_DIR: ./dist       # carpeta con tus archivos

      - name: Configure PWA specific headers in S3
        run: |
          echo "üîß Configurando headers espec√≠ficos para PWA..."
          
          # Service Worker - No cache
          aws s3 cp s3://krixx-app/sw.js s3://krixx-app/sw.js \
            --metadata-directive REPLACE \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "application/javascript"
          
          # Manifest - Cache 1 hora
          aws s3 cp s3://krixx-app/manifest.webmanifest s3://krixx-app/manifest.webmanifest \
            --metadata-directive REPLACE \
            --cache-control "max-age=3600" \
            --content-type "application/manifest+json"
          
          # HTML files - No cache
          aws s3 cp s3://krixx-app/index.html s3://krixx-app/index.html \
            --metadata-directive REPLACE \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"
          
          echo "‚úÖ Headers PWA configurados"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Invalidate CloudFront cache
        run: |
          echo "üîÑ Invalidando cache de CloudFront..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          echo "‚úÖ Cache de CloudFront invalidado"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Verify PWA deployment
        run: |
          echo "üéâ PWA desplegada exitosamente!"
          echo ""
          echo "üì± URLs importantes:"
          echo "   App: https://d3usnihlicd9xb.cloudfront.net"
          echo "   Manifest: https://d3usnihlicd9xb.cloudfront.net/manifest.webmanifest"
          echo "   Service Worker: https://d3usnihlicd9xb.cloudfront.net/sw.js"
          echo ""
          echo "üîç Para verificar:"
          echo "   1. Prueba rutas directas como /app/home"
          echo "   2. Verifica instalaci√≥n PWA"
          echo "   3. Prueba funcionamiento offline"